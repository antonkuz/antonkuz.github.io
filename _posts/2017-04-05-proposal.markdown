---
layout: default
title:  "Proposal"
date:   2017-04-05 04:20:00
categories: main
---

# Testing Graph Bipartiteness using MPI
## Summary
We are going to check if a large graphs is bipartite or not  on multi-core platforms such as the GHC machines.

## Background
A Bipartite Graph is a graph whose vertices can be divided into two independent sets, U and V such that every edge (u, v) either connects a vertex from U to V or a vertex from V to U. In other words, for every edge (u, v), either u belongs to U and v to V, or u belongs to V and v to U. We can also say that there is no edge that connects vertices of same set.

## The challenge 
 Checking a huge graphs(with over million nodes and edges) for bipartiteness is challenging when performed on a single node because of both the space and
 time constraints. We plan to parallise the graph processing to make it faster.

## Resources

We plan to use the Latedays cluster to run our code on multiple machines. For communication/synchronization, we'll use OpenMPI.

## Goals and Deliverables
Describe the deliverables or goals of your project.

This is by far the most important section of the proposal:

 We plan to implement an algorithm to check for Bipartiteness of a graph that is highly parallel . We are aiming for at least 10x speedup as compared to the computation time on a single node. At the demo, we will show our algorithm in action on graphs which we will obtain from the Stanford Network Analysis
 project repository. (http://snap.stanford.edu/).



## Platform choice
It would be beneficial to use multiple machines to process large graphs. OpenMPI will help us dp that by establishing a message passing system between them. Info about latedays: High core count? Connection info? 

## Schedule

| Week of  | Things to do |
| ------------- | ------------- |
| April 10  | Implement sequential algorithm, research papers/web on possible parallelization approaches (algorithms and alternatives to MPI).   |
| April 17 | Collect testcases, implement testbench, implement a working parallel version, complete checkpoint writeup. |
| April 24 | Optimize the the parallel algorithm, test on large graphs, iterate. |
| May 1    | Implement a version with a different approach (e.g. algorithm or framework), collect speedup data. |
| May 8    | Wrap up, stretch goals, final report. |

[jekyll-gh]: https://github.com/mojombo/jekyll
[jekyll]:    http://jekyllrb.com
